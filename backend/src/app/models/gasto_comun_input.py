# coding: utf-8

"""
    Casitas Teto API

    API para Sistema de Gestión de Condominios

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GastoComunInput(BaseModel):
    """
    GastoComunInput
    """ # noqa: E501
    residente_id: StrictInt = Field(alias="residenteId")
    condominio_id: StrictInt = Field(alias="condominioId")
    mes: Annotated[int, Field(le=12, strict=True, ge=1)]
    ao: StrictInt = Field(alias="año")
    monto_base: Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]] = Field(alias="montoBase")
    servicios: Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]
    fecha_vencimiento: Optional[date] = Field(default=None, alias="fechaVencimiento")
    __properties: ClassVar[List[str]] = ["residenteId", "condominioId", "mes", "año", "montoBase", "servicios", "fechaVencimiento"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GastoComunInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GastoComunInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "residenteId": obj.get("residenteId"),
            "condominioId": obj.get("condominioId"),
            "mes": obj.get("mes"),
            "año": obj.get("año"),
            "montoBase": obj.get("montoBase"),
            "servicios": obj.get("servicios"),
            "fechaVencimiento": obj.get("fechaVencimiento")
        })
        return _obj


