# coding: utf-8

"""
    Casitas Teto API

    API para Sistema de Gestión de Condominios

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from app.models.gasto_comun_observaciones_inner import GastoComunObservacionesInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GastoComun(BaseModel):
    """
    GastoComun
    """ # noqa: E501
    id: Optional[StrictInt] = None
    residente_id: Optional[StrictInt] = Field(default=None, alias="residenteId")
    condominio_id: Optional[StrictInt] = Field(default=None, alias="condominioId")
    mes: Optional[StrictInt] = None
    ao: Optional[StrictInt] = Field(default=None, alias="año")
    monto_base: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="montoBase")
    cuota_mantencion: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cuotaMantencion")
    servicios: Optional[Union[StrictFloat, StrictInt]] = None
    multas: Optional[Union[StrictFloat, StrictInt]] = None
    monto_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="montoTotal")
    estado: Optional[StrictStr] = None
    fecha_emision: Optional[date] = Field(default=None, alias="fechaEmision")
    fecha_vencimiento: Optional[date] = Field(default=None, alias="fechaVencimiento")
    fecha_pago: Optional[datetime] = Field(default=None, alias="fechaPago")
    observaciones: Optional[List[GastoComunObservacionesInner]] = None
    __properties: ClassVar[List[str]] = ["id", "residenteId", "condominioId", "mes", "año", "montoBase", "cuotaMantencion", "servicios", "multas", "montoTotal", "estado", "fechaEmision", "fechaVencimiento", "fechaPago", "observaciones"]

    @field_validator('estado')
    def estado_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PENDIENTE', 'PAGADO', 'VENCIDO', 'MOROSO',):
            raise ValueError("must be one of enum values ('PENDIENTE', 'PAGADO', 'VENCIDO', 'MOROSO')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GastoComun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in observaciones (list)
        _items = []
        if self.observaciones:
            for _item in self.observaciones:
                if _item:
                    _items.append(_item.to_dict())
            _dict['observaciones'] = _items
        # set to None if fecha_pago (nullable) is None
        # and model_fields_set contains the field
        if self.fecha_pago is None and "fecha_pago" in self.model_fields_set:
            _dict['fechaPago'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GastoComun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "residenteId": obj.get("residenteId"),
            "condominioId": obj.get("condominioId"),
            "mes": obj.get("mes"),
            "año": obj.get("año"),
            "montoBase": obj.get("montoBase"),
            "cuotaMantencion": obj.get("cuotaMantencion"),
            "servicios": obj.get("servicios"),
            "multas": obj.get("multas"),
            "montoTotal": obj.get("montoTotal"),
            "estado": obj.get("estado"),
            "fechaEmision": obj.get("fechaEmision"),
            "fechaVencimiento": obj.get("fechaVencimiento"),
            "fechaPago": obj.get("fechaPago"),
            "observaciones": [GastoComunObservacionesInner.from_dict(_item) for _item in obj.get("observaciones")] if obj.get("observaciones") is not None else None
        })
        return _obj


