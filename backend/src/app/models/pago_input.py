# coding: utf-8

"""
    Casitas Teto API

    API para Sistema de GestiÃ³n de Condominios

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PagoInput(BaseModel):
    """
    PagoInput
    """ # noqa: E501
    condominio_id: StrictInt = Field(alias="condominioId")
    residente_id: StrictInt = Field(alias="residenteId")
    tipo: StrictStr
    referencia_id: StrictInt = Field(alias="referenciaId")
    monto: Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]
    metodo_pago: StrictStr = Field(alias="metodoPago")
    numero_transaccion: Optional[StrictStr] = Field(default=None, alias="numeroTransaccion")
    __properties: ClassVar[List[str]] = ["condominioId", "residenteId", "tipo", "referenciaId", "monto", "metodoPago", "numeroTransaccion"]

    @field_validator('tipo')
    def tipo_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('GASTO_COMUN', 'MULTA', 'RESERVA',):
            raise ValueError("must be one of enum values ('GASTO_COMUN', 'MULTA', 'RESERVA')")
        return value

    @field_validator('metodo_pago')
    def metodo_pago_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('TRANSFERENCIA', 'TARJETA', 'EFECTIVO', 'WEBPAY', 'KHIPU',):
            raise ValueError("must be one of enum values ('TRANSFERENCIA', 'TARJETA', 'EFECTIVO', 'WEBPAY', 'KHIPU')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PagoInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PagoInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "condominioId": obj.get("condominioId"),
            "residenteId": obj.get("residenteId"),
            "tipo": obj.get("tipo"),
            "referenciaId": obj.get("referenciaId"),
            "monto": obj.get("monto"),
            "metodoPago": obj.get("metodoPago"),
            "numeroTransaccion": obj.get("numeroTransaccion")
        })
        return _obj


