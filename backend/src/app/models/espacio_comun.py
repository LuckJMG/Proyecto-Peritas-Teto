# coding: utf-8

"""
    Casitas Teto API

    API para Sistema de GestiÃ³n de Condominios

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EspacioComun(BaseModel):
    """
    EspacioComun
    """ # noqa: E501
    id: Optional[StrictInt] = None
    condominio_id: Optional[StrictInt] = Field(default=None, alias="condominioId")
    nombre: Optional[StrictStr] = None
    tipo: Optional[StrictStr] = None
    capacidad: Optional[StrictInt] = None
    costo_por_hora: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="costoPorHora")
    descripcion: Optional[StrictStr] = None
    activo: Optional[StrictBool] = None
    requiere_pago: Optional[StrictBool] = Field(default=None, alias="requierePago")
    __properties: ClassVar[List[str]] = ["id", "condominioId", "nombre", "tipo", "capacidad", "costoPorHora", "descripcion", "activo", "requierePago"]

    @field_validator('tipo')
    def tipo_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ESTACIONAMIENTO', 'QUINCHO', 'MULTICANCHA', 'SALA_EVENTOS',):
            raise ValueError("must be one of enum values ('ESTACIONAMIENTO', 'QUINCHO', 'MULTICANCHA', 'SALA_EVENTOS')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EspacioComun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if costo_por_hora (nullable) is None
        # and model_fields_set contains the field
        if self.costo_por_hora is None and "costo_por_hora" in self.model_fields_set:
            _dict['costoPorHora'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EspacioComun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "condominioId": obj.get("condominioId"),
            "nombre": obj.get("nombre"),
            "tipo": obj.get("tipo"),
            "capacidad": obj.get("capacidad"),
            "costoPorHora": obj.get("costoPorHora"),
            "descripcion": obj.get("descripcion"),
            "activo": obj.get("activo"),
            "requierePago": obj.get("requierePago")
        })
        return _obj


