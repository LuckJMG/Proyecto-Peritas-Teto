# coding: utf-8

"""
    Casitas Teto API

    API para Sistema de GestiÃ³n de Condominios

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from app.models.rol_usuario import RolUsuario
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Usuario(BaseModel):
    """
    Usuario
    """ # noqa: E501
    id: Optional[StrictInt] = None
    email: Optional[StrictStr] = None
    nombre: Optional[StrictStr] = None
    apellido: Optional[StrictStr] = None
    rol: Optional[RolUsuario] = None
    condominio_id: Optional[StrictInt] = Field(default=None, alias="condominioId")
    activo: Optional[StrictBool] = None
    fecha_creacion: Optional[datetime] = Field(default=None, alias="fechaCreacion")
    ultimo_acceso: Optional[datetime] = Field(default=None, alias="ultimoAcceso")
    __properties: ClassVar[List[str]] = ["id", "email", "nombre", "apellido", "rol", "condominioId", "activo", "fechaCreacion", "ultimoAcceso"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Usuario from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if condominio_id (nullable) is None
        # and model_fields_set contains the field
        if self.condominio_id is None and "condominio_id" in self.model_fields_set:
            _dict['condominioId'] = None

        # set to None if ultimo_acceso (nullable) is None
        # and model_fields_set contains the field
        if self.ultimo_acceso is None and "ultimo_acceso" in self.model_fields_set:
            _dict['ultimoAcceso'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Usuario from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "email": obj.get("email"),
            "nombre": obj.get("nombre"),
            "apellido": obj.get("apellido"),
            "rol": obj.get("rol"),
            "condominioId": obj.get("condominioId"),
            "activo": obj.get("activo"),
            "fechaCreacion": obj.get("fechaCreacion"),
            "ultimoAcceso": obj.get("ultimoAcceso")
        })
        return _obj


