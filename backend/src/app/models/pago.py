# coding: utf-8

"""
    Casitas Teto API

    API para Sistema de GestiÃ³n de Condominios

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Pago(BaseModel):
    """
    Pago
    """ # noqa: E501
    id: Optional[StrictInt] = None
    condominio_id: Optional[StrictInt] = Field(default=None, alias="condominioId")
    residente_id: Optional[StrictInt] = Field(default=None, alias="residenteId")
    tipo: Optional[StrictStr] = None
    referencia_id: Optional[StrictInt] = Field(default=None, alias="referenciaId")
    monto: Optional[Union[StrictFloat, StrictInt]] = None
    metodo_pago: Optional[StrictStr] = Field(default=None, alias="metodoPago")
    estado_pago: Optional[StrictStr] = Field(default=None, alias="estadoPago")
    numero_transaccion: Optional[StrictStr] = Field(default=None, alias="numeroTransaccion")
    fecha_pago: Optional[datetime] = Field(default=None, alias="fechaPago")
    comprobante_url: Optional[StrictStr] = Field(default=None, alias="comprobanteUrl")
    registrado_por: Optional[StrictInt] = Field(default=None, alias="registradoPor")
    __properties: ClassVar[List[str]] = ["id", "condominioId", "residenteId", "tipo", "referenciaId", "monto", "metodoPago", "estadoPago", "numeroTransaccion", "fechaPago", "comprobanteUrl", "registradoPor"]

    @field_validator('tipo')
    def tipo_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('GASTO_COMUN', 'MULTA', 'RESERVA',):
            raise ValueError("must be one of enum values ('GASTO_COMUN', 'MULTA', 'RESERVA')")
        return value

    @field_validator('metodo_pago')
    def metodo_pago_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('TRANSFERENCIA', 'TARJETA', 'EFECTIVO', 'WEBPAY', 'KHIPU',):
            raise ValueError("must be one of enum values ('TRANSFERENCIA', 'TARJETA', 'EFECTIVO', 'WEBPAY', 'KHIPU')")
        return value

    @field_validator('estado_pago')
    def estado_pago_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PENDIENTE', 'APROBADO', 'RECHAZADO', 'REVERSADO',):
            raise ValueError("must be one of enum values ('PENDIENTE', 'APROBADO', 'RECHAZADO', 'REVERSADO')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Pago from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if numero_transaccion (nullable) is None
        # and model_fields_set contains the field
        if self.numero_transaccion is None and "numero_transaccion" in self.model_fields_set:
            _dict['numeroTransaccion'] = None

        # set to None if comprobante_url (nullable) is None
        # and model_fields_set contains the field
        if self.comprobante_url is None and "comprobante_url" in self.model_fields_set:
            _dict['comprobanteUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Pago from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "condominioId": obj.get("condominioId"),
            "residenteId": obj.get("residenteId"),
            "tipo": obj.get("tipo"),
            "referenciaId": obj.get("referenciaId"),
            "monto": obj.get("monto"),
            "metodoPago": obj.get("metodoPago"),
            "estadoPago": obj.get("estadoPago"),
            "numeroTransaccion": obj.get("numeroTransaccion"),
            "fechaPago": obj.get("fechaPago"),
            "comprobanteUrl": obj.get("comprobanteUrl"),
            "registradoPor": obj.get("registradoPor")
        })
        return _obj


