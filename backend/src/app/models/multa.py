# coding: utf-8

"""
    Casitas Teto API

    API para Sistema de GestiÃ³n de Condominios

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Multa(BaseModel):
    """
    Multa
    """ # noqa: E501
    id: Optional[StrictInt] = None
    residente_id: Optional[StrictInt] = Field(default=None, alias="residenteId")
    condominio_id: Optional[StrictInt] = Field(default=None, alias="condominioId")
    tipo: Optional[StrictStr] = None
    descripcion: Optional[StrictStr] = None
    monto: Optional[Union[StrictFloat, StrictInt]] = None
    estado: Optional[StrictStr] = None
    fecha_emision: Optional[date] = Field(default=None, alias="fechaEmision")
    fecha_pago: Optional[datetime] = Field(default=None, alias="fechaPago")
    motivo_condonacion: Optional[StrictStr] = Field(default=None, alias="motivoCondonacion")
    creado_por: Optional[StrictInt] = Field(default=None, alias="creadoPor")
    __properties: ClassVar[List[str]] = ["id", "residenteId", "condominioId", "tipo", "descripcion", "monto", "estado", "fechaEmision", "fechaPago", "motivoCondonacion", "creadoPor"]

    @field_validator('tipo')
    def tipo_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('RETRASO_PAGO', 'INFRAESTRUCTURA', 'RUIDO', 'MASCOTA', 'OTRO',):
            raise ValueError("must be one of enum values ('RETRASO_PAGO', 'INFRAESTRUCTURA', 'RUIDO', 'MASCOTA', 'OTRO')")
        return value

    @field_validator('estado')
    def estado_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PENDIENTE', 'PAGADA', 'CONDONADA',):
            raise ValueError("must be one of enum values ('PENDIENTE', 'PAGADA', 'CONDONADA')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Multa from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if fecha_pago (nullable) is None
        # and model_fields_set contains the field
        if self.fecha_pago is None and "fecha_pago" in self.model_fields_set:
            _dict['fechaPago'] = None

        # set to None if motivo_condonacion (nullable) is None
        # and model_fields_set contains the field
        if self.motivo_condonacion is None and "motivo_condonacion" in self.model_fields_set:
            _dict['motivoCondonacion'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Multa from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "residenteId": obj.get("residenteId"),
            "condominioId": obj.get("condominioId"),
            "tipo": obj.get("tipo"),
            "descripcion": obj.get("descripcion"),
            "monto": obj.get("monto"),
            "estado": obj.get("estado"),
            "fechaEmision": obj.get("fechaEmision"),
            "fechaPago": obj.get("fechaPago"),
            "motivoCondonacion": obj.get("motivoCondonacion"),
            "creadoPor": obj.get("creadoPor")
        })
        return _obj


